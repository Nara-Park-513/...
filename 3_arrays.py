import numpy as np

#common
arr = np.array([[1,2,3,4,5],[6,7,8,9,10]])
print(arr[0:2, 2])

#2차원 배열 슬라이싱
arr_2 = np.array([[1,2,3,4,5],[6,7,8,9,10]])
print(arr_2[1, 1:4])

#reflect
arr = np.array([1,2,3,4,5,6,7]) #[0,1,2,3,4,5,6]
#배열에서 0부터 시작해서 두 칸씩 건너뛰며
print(arr[::2]) #우리가 알고 있는 수의 체계가 아니라 인덱스이기 때문이다
print(arr[1::2])

arr = np.array([1,2,3,4,5,6,7])
print(arr[1:5:2])
'''
2,3,4,5 but 2dan
2,4
'''
#6 [1:5:2]


#5) 네거티브 슬라이싱 : 끝에서부터 인덱스를 참조한다
# [-7, -6, -5, -4, -3, -2, -1] 라스트 인덱스 미포함
ar = np.array([1,2,3,4,5,6,7])
print(ar[-3:-1])

# [:4] 처음부터 지정번호까지 라스트 인덱스 미포함
# arr[2:5] 5 - 2

#지정부터 끝까지 [4:] 지정한 순번부터 끝까지
arr = np.array([1,2,3,4,5,6,7])
print(arr[4:]) #5, 6, 7

#인덱스 1부터 인덱스 5까지 요소를 슬라이스 한다
arr = np.array([1,2,3,4,5,6,7]) #[0,1,2,3,4,5,6]

#결과에 시작인덱스는 포함되지만 끝 인덱스는 제외된다
print(arr[1:5]) #2 3 4 5 라스트인덱스 미포함

#값이 42인 0차원 배열을 만든다 -1 오른쪽부터 시작
#5)배열 슬라이싱 : 주어진 인덱스에서 다른 주어진 인덱스 요소로 
#가져오는 것을 의미한다 [start: end], [start:end:step]


#4)음수 인덱싱
rightstart = np.array([[1,2,3,4,5],[6,7,8,9,10]]) #0 1
print(rightstart[1, -1])
print(rightstart[1, -2])

#3)3차원 배열에 접근하기
arr = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])
print(arr[0,1,2])#첫번째 배열에 두번째 배열 차일드 접근
print(arr[1,0,1])


#2)2차원 배열에 접근하기
arr = np.array([[1,2,3,4,5],[6,7,8,9,10]])
#0[0,1,2,3,4], 1[0,1,2,3,4]
print(arr[0,1])

#1)배열 요소의 액세스
arr = np.array([1,2,3,4])
print(arr[0] + arr[1] + arr[2] + arr[3])


'''
NumPy Array Indexing
- 배열 요소에 접근하는 것과 같다
- 배열 요소에 접근하려면 해당 인덱스 번호를 참조한다
- 배열의 인덱스는 0부터 시작한다
'''

#3차원 이상은 ndmin으로 차원수를 정의 할 수 있다
newArr = np.array([1,2,3,4],ndmin=5)
print(newArr)
print('number of dimensions :', newArr.ndim)
'''
이 배열에는 가장 안쪽 차원(5번째 차원에는) 4개의 요소가 있고
4번째 차원에는 벡터인 요소가 하나가 있고
3번째 차원에는 벡터를 포함한 행렬인 요소가 하나 있고
2번째 차원에는 3차원 배열인 요소가 하나 있고
1번째 차원에는 4차원 배열인 요소가 하나 있다
'''

#몇 차원인지 확인 하는 것 .ndim
a = np.array(42)
b = np.array([1,2,3,4,5])
c = np.array([[1,2,3],[4,5,6]])
d = np.array([[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]]])

print(a.ndim, b.ndim, c.ndim, d.ndim)

arr = np.array(42)
print(arr)
#3차원 배열
arr = np.array([[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]]])
print(arr)

#2차원 배열 ([[],[]]) x [],[] 이는 종종 행렬이나 텐서(Tensor)를 나타내는데 사용
arr = np.array([[1,2,3],[4,5,6]])
print(arr)
'''
Creating Arrays
0 ~ 3차원 배열
'''